generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id            String    @id @unique @default(cuid())
    name          String?   @db.VarChar(255)
    email         String?   @unique
    password      String?   @db.VarChar(255)
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Course        Course[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id          Int      @id @unique @default(autoincrement())
    title       String   @db.VarChar(255)
    type        String   @db.VarChar(255)
    review_rate Int      @default(0)
    lessons     Int      @default(0)
    length      Int      @default(0)
    price       Int      @default(0)
    oldPrice    Int      @default(0)
    published   Boolean  @default(false)
    slug        Slug     @relation(fields: [slug_id], references: [id])
    category    Category @relation(fields: [category_id], references: [id])
    media       Media    @relation(fields: [media_id], references: [id])
    topic       Topic[]
    user        User     @relation(fields: [user_email], references: [email], onDelete: Cascade)
    slug_id     Int
    category_id Int
    media_id    Int
    user_email  String

    @@unique([slug_id])
    @@unique([category_id])
    @@unique([media_id])
    @@index([user_email])
}

model Slug {
    id     Int     @id @unique @default(autoincrement())
    url    String  @unique @db.VarChar(255)
    course Course?
}

model Media {
    id     Int     @id @unique @default(autoincrement())
    title  String  @db.VarChar(255)
    url    String  @unique @db.VarChar(255)
    course Course?
}

model Category {
    id     Int     @id @unique @default(autoincrement())
    title  String  @db.VarChar(255)
    url    String  @unique @db.VarChar(255)
    course Course?
}

model Topic {
    id        Int     @id @unique @default(autoincrement())
    title     String  @db.VarChar(255)
    url       String  @unique @db.VarChar(255)
    course    Course  @relation(fields: [course_id], references: [id])
    video     Video[]
    course_id Int

    @@unique([course_id])
}

model Video {
    id       Int    @id @unique @default(autoincrement())
    title    String @db.VarChar(255)
    type     String @db.VarChar(255)
    url      String @unique @db.VarChar(255)
    topic    Topic? @relation(fields: [topic_id], references: [id])
    topic_id Int?

    @@unique([topic_id])
}
